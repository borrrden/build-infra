#!/usr/bin/env bash

# This script checks the health of all nfs mounts found in /etc/fstab,
# remounting any which are disconnected.
#
# In the event a disconnected mount is reconnected and docker is on the host
# all containers are inspected to discover and restart those affected

# Basic locking to ensure we're not running multiple copies of this script simultaneously
lockfile=/tmp/nfs-remount.lock
if ! mkdir "$lockfile" 2>/dev/null; then
  echo "nfs-remount is already running"
  exit 1
else
  trap 'rm -rf "${lockfile}"' EXIT
fi

function log() {
  echo "$(date "+%Y-%m-%d %H:%M:%S"): $@"
}

changed_containers=""

# Loop through each uncommented mountpoint with a filesystem type of 'nfs'
for mount in $(awk '$1 !~ /^#/ && $3 == "nfs" { print $2 }' /etc/fstab)
do
  changed_mounts=""
  if ! timeout 30s mountpoint -q $mount
  then
    # If it's not mounted, try to mount it, tracking successful remounts in reconnected_mounts
    if timeout 30s mount $mount
    then
      changed_mounts="$changed_mounts $mount"
      log "$mount successfully mounted"
    fi
  fi
done

# If we haven't tried to or been able to mount anything, we can exit
[ "$changed_mounts" = "" ] && exit 0

# If we have made a change and have docker on this host, identify and restart any containers
# which use the affected paths
if command -v docker &>/dev/null
then
  for container in $(docker ps --format '{{ .Names }}')
  do
    container_mounts=$(docker inspect --format '{{ json .HostConfig.Binds }}' $container)
    for mount in $changed_mounts
    do
      if echo $container_mounts | grep "\"$mount" &>/dev/null
      then
        # Found a container using a reconnected path, we track it for now and target uniques
        # so that we don't end up restarting containers multiple times in the event we've 
        # reconnected multiple mounts
        log "$mount is used by container $container"
        changed_containers="$changed_containers $container"
      fi
    done
  done

  # Restart tracked containers
  for container in $(echo $changed_containers | tr ' ' '\n' | sort -u)
  do
    log "$container has changed mounts"
    if docker restart $container &>/dev/null
    then
      log "$container restarted"
    else
      log "Error, $container could NOT be restarted"
    fi
  done
fi
