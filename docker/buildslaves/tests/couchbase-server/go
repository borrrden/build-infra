#!/usr/bin/env bash

### This script can be used for testing couchbase-server build containers
### Usage:
###   DISTROS="amzn2 ubuntu20" ./go <arguments>
###
### Mandatory Arguments:
###   -k: retain artifacts (e.g. for additional functionality testing)
###   -s: path to ssh key (used to sync private repos)
###
### Optional Arguments:
###   -r: manifest repo (default: git://github.com/couchbase/manifest)
###   -m: manifest file (default: couchbase-server/cheshire-cat.xml)
###   -e: edition (default: enterprise)
###   -v: version (default: 7.0.0)
###   -b: build number (default: 9999)
###
### Notes:
###   - DISTROS should be a space-seperated string containing a list of targeted distros
###   - If DISTROS does not exist in the environments, all folder names from ../../couchbase-server will be used instead
###   - A dummy gpg key is created where artifact signing is required this will be named "Couchbase Release Key (RPM)"

help() {
    awk '/^###/' "$0" | sed -e 's/### //g' -e 's/###//g'
}

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -k|--keep-artifacts) KEEP_TEST_ARTIFACTS="true"; ;;
        -s|--ssh-key) SSH_KEY=$2; shift ;;
        -b|--build-number) BLD_NUM="$2"; shift ;;
        -e|--edition) EDITION="$2"; shift ;;
        -m|--manifest-file) MANIFEST_FILE="$2"; shift ;;
        -r|--manifest-repo) MANIFEST_REPO="$2"; shift ;;
        -v|--version) VERSION="$2"; shift ;;
        -h|--help) help; exit 0; ;;
        *) echo "Unrecognised parameter: $1"; ;;
    esac
    shift
done

MANIFEST_REPO=${MANIFEST_REPO:-git://github.com/couchbase/manifest}
MANIFEST_FILE=${MANIFEST_FILE:-couchbase-server/cheshire-cat.xml}
EDITION=${EDITION:-enterprise}
VERSION=${VERSION:-7.0.0}
BLD_NUM=${BLD_NUM:-9999}

[ ! -f "$SSH_KEY" ] && echo "You must use -s to provide an SSH key for synchronizing private repos" && exit 1

# Use list of distros from ../../couchbase-server if none provided
DISTROS=${DISTROS:-$(cd ../../couchbase-server/ && echo *)}

for distro in ${DISTROS}
do
    # Build and start container
    set -e
    pushd ../../couchbase-server/$distro
    ./go || exit 1
    popd

    # Run test build
    echo "Starting test container"
    test_container=$(docker run -d --init --rm -v $SSH_KEY:/root/.ssh/id_rsa couchbasebuild/server-${distro}-build:latest tail -f /dev/null)
    trap "echo 'Stopping test container' && docker stop $test_container && exit 1" SIGHUP SIGINT EXIT
    key=$(mktemp gpg.XXXXXX)
    cat <<-EOF > ${key}
Key-Type: RSA
Subkey-Type: RSA
Key-Length: 2048
Subkey-Length: 2048
Expire-Date: 0
Name-Real: build-team
Name-Email: build-team@couchbase.com
Name-Comment: Couchbase Release Key (RPM)
%no-protection
%commit
EOF
    docker cp $key $test_container:$key
    docker exec -i $test_container bash -s <<-EOF
mkdir -p /run/secrets || :
gpg --gen-key --batch "${key}"
rm -f "${key}"
EOF
    rm ${key}
    docker cp build-server.sh $test_container:/build-server.sh
    docker exec -it $test_container bash /build-server.sh \
        --build-number $BLD_NUM \
        --distro $distro \
        --edition $EDITION \
        --manifest-repo $MANIFEST_REPO \
        --manifest-file $MANIFEST_FILE \
        --version $VERSION

    # Grab artifacts if required
    if [ "$KEEP_TEST_ARTIFACTS" = "true" ]
    then
        (docker cp $test_container:/build/artifacts .)
    fi

    # tidy up
    docker stop $test_container
done
